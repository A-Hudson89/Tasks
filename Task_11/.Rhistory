0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf= NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix((1:20), nrow = 4, ncol = 3)
my_matrix2 <- matrix((1:20), nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
"Bill, Gina, Kelly, Sean"
patients <- c("Bill, Gina, Kelly, Sean")
patients <- "Bill, Gina, Kelly, Sean"
info()
patients <- c(Bill, Gina, Kelly, Sean)
nxt()
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
!5=!7
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, TRUE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 >3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints > 7))
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
boring_function <- function(x) {
x
}
?
nxt()
boring_function <- function(x) {
x
}
boring_function <- function(x) {
x
}
nxt()
boring <- function(x) {
x
}
nxt()
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
mean
}
submit()
my_mean <- function(my_vector) {
sum()/length()
}
submit()
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector) / length(my_vector)
}
submit()
?sum
?mean
nxt()
my_mean <- function(my_vector) {
sum(my_mean)/length(my_mean)
}
submit()
my_mean <- function(my_vector) {
sum(c(1,2,3))/length(c(1,2,3))
}
submit()
my_mean <- function(my_vector) {
sum(c(my_vector))/length(c(my_vector))
}
submit()
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
View(my_mean)
View(my_mean)
View(my_mean)
View(my_mean)
nxt()
?vector
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
View(my_vector)
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector) / length(my_vector)
}
submit()
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
View(my_mean)
?function
submit()
nxt()
?function
nxt()
nxt()
my_mean <- function(my_vector) {
sum(my_vector) / length(my_vector)
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11, 5)
remainder( divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
evaluate <- function(func, dat){
func + dat
}
submit()
evaluate <- function(func, dat){
func(dat)
}
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(standev, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 7)
evaluate(function(x){x:1}, 7)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram("hey","fucker")
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(adjective = "", place = "", noun = "")
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2)
sample1 <- sample(population1, size)
sample2 <- sample(population2, size)
size <- 50
sample1 <- sample(population1, size)
sample2 <- sample(population2, size)
sample1
sample2
population1
population2
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_dad")
PatGrandpa <- makeFounder("grandpa_dad")
head(MatGrandma)
head(MatGrandpa)
nrow(MatGrandma)
head(PatGrandma)
rrow(PatGrandma)
nrow(PatGrandma)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMom
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMomMom
ToMomDad
ToMomMom == ToMomDad
ToDadDad <- length(grep("grandma_dad", Focus))/length(Focus)
ToDadMom <- length(grep("grandpa_dad", Focus))/length(Focus)
ToDadDad == ToDadMom
AvgRelateTotal <- length(grep("grandma_mom", "grandpa_mom", "grandma_dad", "grandpa_dad", Focus))/length(Focus)
AvgRelateTotal
head(AvgRelateTotal)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)
ToSib
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))length(Focus))
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))
ManySiblings
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main = "", xlab = "proportion shared genes")
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p,HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb") col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
instal.packages("learnPopGen")
library(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
library(learnPopGen)
learnPopGen()
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=2000, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(samples, function(x) nrow(simPop(x,500)))
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x,500)))
Line <- lm(tExt ~ Samples)
summary(Line)
summary(Line)
summary(Line)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x,500)))
Line <- lm(tExt ~ Samples)
tExt
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~ Samples + 0)
abline(Line2)
Line2$coef
Line$coef
plot(Samples, tExt)
abline(Line)
abline(Line2)
Line2 <- lm(tExt ~ Samples + 0)
Line2$coef
plot(Samples, tExt)
abline(Line2)
abline(Line)
Line2 <- lm(tExt ~ Samples + 0)
Line2$coef
plot(Samples, tExt)
abline(Line2)
Line <- rlm(tExt ~ Samples)
Line2 <- rlm(tExt ~ Samples + 0)
install.packages(MASS)
library(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
Line <- rlm(tExt ~ Samples)
Line2 <- rlm(tExt ~ Samples + 0)
plot(Samples, tExt)
abline(Line)
abline(Line2)
?rlm
simulate(tExt)
library(lmtest)
install.packages("lmtest")
library(lmtest)
Line <- lm(tExt ~ Samples)
bptest(Line)
Line %>%
vcovHC() %>%
diag() %>%
sqrt()
install.packages("sandwich")
library(sandwich)
Line <- rlm(tExt ~ Samples)
bptest(Line)
bptest(Line2)
Line2 <- rlm(tExt ~ Samples + 0)
bptest(Line2)
Line <- wlm(tExt ~ Samples)
Line <- wlm(tExt ~ Samples, data = tExt, weights = 1/sd_variance)
Line <- rlm(tExt ~ Samples, data = tExt, weights = 1/sd_variance)
Line <- rlm(tExt ~ Samples, weights = 1/sd_variance)
wt <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
wt <- 1 / lm(abs(Line$residuals) ~ Line$fitted.values)$fitted.values^2
wlm_Line <- lm(tExt ~ Samples, data = df, weights=wt)
wlm_Line <- lm(tExt ~ Samples, List = df, weights=wt)
wlm_Line <- lm(tExt ~ Samples, weights=wt)
plot(Samples, tExt)
wlm_Line <- lm(tExt ~ Samples, weights=wt)
wlm_Line
Line$coef
Line <- lm(tExt ~ Samples)
Line
plot(Samples, tExt)
Line <- lm(tExt ~ Samples)
abline(Line)
LineA <- rlm(tExt ~ Samples)
abline(LineA)
LineA$coef
summary(LineA)
summary(Line)
bptest(LineA)
source("http:jonsmitchell.com/comde/fxn05.R")
source("http://jonsmitchell.com/comde/fxn05.R")
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1 : nrow(Pop1), Pop1[,1], ylim = c(0,1), type = "1", xlab = "generation", ylab = "allele freq.", lwd=2)
plot(1 : nrow(Pop1), Pop1[,1], ylim = c(0,1), type = "l", xlab = "generation", ylab = "allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col="red")
legend("topleft", legend = c("a", "b"), col = c("black", "red"), ldw = 2, bty="n")
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit(nruns = 10, n = 50, ngens = 100, init_p = 0.5, h =1, s = 0)
Expectation <- c(10,10,10,10)
Observed <- c(15,15,5,5)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(5,0,0,35)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(2,3,10,30)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(9,7,11,12)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(10,10,10,10)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
setwd('C:\\Desktop\\Evolution\\Tasks\\Task_04")
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
length(results)
s
setwd('C:\\Desktop\\Evolution\\Tasks\\Task_04")
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
length
length(results)
nrow(results)
ncol(results)
colnames(results)
head(results)
counts <- results[,c("yellow","red","green","blue","black","tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisq <- apply(counts, 1, calcChi)
plotChis(counts)
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- mean(Chisqs)
Avg
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
backgroundsAvgs
backgroundAvgs
propSig <- length(which(Chisqs > 11.70))/length(Chisqs)
percSig <- round(100 * propSig)
propSig
percSig
setwd("C:\\Desktop\\Evolution\\Tasks\\Task_04")
setwd("C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_11")
library(meme)
Meme<-"https://i.imgflip.com/n967c.jpg"
Meme2<-meme(Meme,size=1.45, "I don't always mate outside of my breeding pool","But when I do,\nI increase my effective population size")
plot(Meme2)
Meme<-"https://i.imgflip.com/n967c.jpg"
Meme2<-meme(Meme,size=1.4, "I don't always mate outside of my breeding pool","But when I do,\nI increase my effective population size")
plot(Meme2)
Meme<-"https://i.imgflip.com/n967c.jpg"
Meme2<-meme(Meme,size=1.4, "I don't always mate\noutside of my breeding pool","But when I do,\nI increase my effective population size")
plot(Meme2)
Meme<-"https://i.imgflip.com/n967c.jpg"
Meme2<-meme(Meme,size=1.5, "I don't always mate\noutside of my breeding pool","But when I do,\nI increase my effective population size")
plot(Meme2)
