sum(my_vector) / length(my_vector)
}
submit()
my_mean <- function(my_vector) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
View(my_mean)
?function
submit()
nxt()
?function
nxt()
nxt()
my_mean <- function(my_vector) {
sum(my_vector) / length(my_vector)
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11, 5)
remainder( divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
evaluate <- function(func, dat){
func + dat
}
submit()
evaluate <- function(func, dat){
func(dat)
}
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(standev, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 7)
evaluate(function(x){x:1}, 7)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste("START", ..., "STOP")
}
submit()
telegram("hey","fucker")
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(adjective = "", place = "", noun = "")
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2)
sample1 <- sample(population1, size)
sample2 <- sample(population2, size)
size <- 50
sample1 <- sample(population1, size)
sample2 <- sample(population2, size)
sample1
sample2
population1
population2
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_dad")
PatGrandpa <- makeFounder("grandpa_dad")
head(MatGrandma)
head(MatGrandpa)
nrow(MatGrandma)
head(PatGrandma)
rrow(PatGrandma)
nrow(PatGrandma)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom", Focus))/length(Focus)
ToMom
ToMomMom <- length(grep("grandma_mom", Focus))/length(Focus)
ToMomDad <- length(grep("grandpa_mom", Focus))/length(Focus)
ToMomMom
ToMomDad
ToMomMom == ToMomDad
ToDadDad <- length(grep("grandma_dad", Focus))/length(Focus)
ToDadMom <- length(grep("grandpa_dad", Focus))/length(Focus)
ToDadDad == ToDadMom
AvgRelateTotal <- length(grep("grandma_mom", "grandpa_mom", "grandma_dad", "grandpa_dad", Focus))/length(Focus)
AvgRelateTotal
head(AvgRelateTotal)
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01))/length(Focus)
ToSib
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))length(Focus))
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))/length(Focus))
ManySiblings
quantile(ManySiblings)
mean(ManySiblings)
plot(density(ManySiblings), main = "", xlab = "proportion shared genes")
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1, 1, type="n", xlim=c(0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sapply(p,HWE))
lines(p, GenoFreq[,"aa"], lwd=2, col="red")
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb") col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
legend("top", legend=c("aa","ab","bb"), col=c("red","purple","blue"), lty=1, lwd=2, bty="n")
Pop <- simPop(500)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
Pop <- simPop(50)
points(Pop[,"freqa"], Pop[,"Genotypes.aa"]/50, pch=22, bg="red")
library(learnPopGen)
instal.packages("learnPopGen")
library(learnPopGen)
install.packages("learnPopGen")
library(learnPopGen)
library(learnPopGen)
learnPopGen()
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=200, nrep=5, pause=0.01)
x <- genetic.drift(Ne=20, nrep=5, pause=0.01)
x <- genetic.drift(Ne=2000, nrep=5, pause=0.01)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(samples, function(x) nrow(simPop(x,500)))
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x,500)))
Line <- lm(tExt ~ Samples)
summary(Line)
summary(Line)
summary(Line)
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x,500)))
Line <- lm(tExt ~ Samples)
tExt
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~ Samples + 0)
abline(Line2)
Line2$coef
Line$coef
plot(Samples, tExt)
abline(Line)
abline(Line2)
Line2 <- lm(tExt ~ Samples + 0)
Line2$coef
plot(Samples, tExt)
abline(Line2)
abline(Line)
Line2 <- lm(tExt ~ Samples + 0)
Line2$coef
plot(Samples, tExt)
abline(Line2)
Line <- rlm(tExt ~ Samples)
Line2 <- rlm(tExt ~ Samples + 0)
install.packages(MASS)
library(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
Line <- rlm(tExt ~ Samples)
Line2 <- rlm(tExt ~ Samples + 0)
plot(Samples, tExt)
abline(Line)
abline(Line2)
?rlm
simulate(tExt)
library(lmtest)
install.packages("lmtest")
library(lmtest)
Line <- lm(tExt ~ Samples)
bptest(Line)
Line %>%
vcovHC() %>%
diag() %>%
sqrt()
install.packages("sandwich")
library(sandwich)
Line <- rlm(tExt ~ Samples)
bptest(Line)
bptest(Line2)
Line2 <- rlm(tExt ~ Samples + 0)
bptest(Line2)
Line <- wlm(tExt ~ Samples)
Line <- wlm(tExt ~ Samples, data = tExt, weights = 1/sd_variance)
Line <- rlm(tExt ~ Samples, data = tExt, weights = 1/sd_variance)
Line <- rlm(tExt ~ Samples, weights = 1/sd_variance)
wt <- 1 / lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
wt <- 1 / lm(abs(Line$residuals) ~ Line$fitted.values)$fitted.values^2
wlm_Line <- lm(tExt ~ Samples, data = df, weights=wt)
wlm_Line <- lm(tExt ~ Samples, List = df, weights=wt)
wlm_Line <- lm(tExt ~ Samples, weights=wt)
plot(Samples, tExt)
wlm_Line <- lm(tExt ~ Samples, weights=wt)
wlm_Line
Line$coef
Line <- lm(tExt ~ Samples)
Line
plot(Samples, tExt)
Line <- lm(tExt ~ Samples)
abline(Line)
LineA <- rlm(tExt ~ Samples)
abline(LineA)
LineA$coef
summary(LineA)
summary(Line)
bptest(LineA)
source("http:jonsmitchell.com/comde/fxn05.R")
source("http://jonsmitchell.com/comde/fxn05.R")
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop(Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot(1:nrow(Pop1), Pop1[,1], ylim=c(0,1), type = "1", xlab="generation", ylab="allele freq.", lwd=2)
plot(1 : nrow(Pop1), Pop1[,1], ylim = c(0,1), type = "1", xlab = "generation", ylab = "allele freq.", lwd=2)
plot(1 : nrow(Pop1), Pop1[,1], ylim = c(0,1), type = "l", xlab = "generation", ylab = "allele freq.", lwd=2)
lines(1:nrow(Pop1), Pop1[,2], lwd=2, col="red")
legend("topleft", legend = c("a", "b"), col = c("black", "red"), ldw = 2, bty="n")
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd = 2, bty="n")
plotFit(nruns = 10, n = 50, ngens = 100, init_p = 0.5, h =1, s = 0)
Expectation <- c(10,10,10,10)
Observed <- c(15,15,5,5)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(5,0,0,35)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(2,3,10,30)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(9,7,11,12)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
Expectation <- c(10,10,10,10)
Observed <- c(10,10,10,10)
chisq <- sum(((Expectation - Observed)^2)/Expectation)
chisq
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
setwd('C:\\Desktop\\Evolution\\Tasks\\Task_04")
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
length(results)
s
setwd('C:\\Desktop\\Evolution\\Tasks\\Task_04")
results<- read.csv("http://jonsmitchell.com/data/biol112labresults.csv", stringsAsFactors = F)
length
length(results)
nrow(results)
ncol(results)
colnames(results)
head(results)
counts <- results[,c("yellow","red","green","blue","black","tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
calcChi(counts[1,])
Chisq <- apply(counts, 1, calcChi)
plotChis(counts)
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
Avg <- mean(Chisqs)
Avg
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
backgroundsAvgs
backgroundAvgs
propSig <- length(which(Chisqs > 11.70))/length(Chisqs)
percSig <- round(100 * propSig)
propSig
percSig
setwd("C:\\Desktop\\Evolution\\Tasks\\Task_04")
setwd("C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_09")
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col= 'black', border= 'white', main= "", xlab= "edge lengths for the anolis tree", ylim= c(0, 50), xlim= c(0, 6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
library(phytools)
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col= 'black', border= 'white', main= "", xlab= "edge lengths for the anolis tree", ylim= c(0, 50), xlim= c(0, 6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
print(AnolisTree)
plot(AnolisTree, type="fan")
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(AnolisTree, svl, vars= TRUE, CI= TRUE)
par(mar=c(0.1,0.1,0.1,0.1))
plot(AnolisTree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[AnolisTree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(AnolisTree,svl,plot=F)
plot(obj, type="fan", legend= 0.7*max(nodeHeights(AnolisTree)), sig= 2, fsize= c(0.7,0.9))
fossilData <- data.frame(svl = log(c(25.4,23.2,17.7,19.7,24,31)), tip1 = c("Anolis_aliniger","Anolis_aliniger","Anolis_occultus","Anolis_ricordii","Anolis_cristatellus","Anolis_occultus"), tip2 = c("Anolis_chlorocyanus","Anolis_coelestinus","Anolis_hendersoni","Anolis_cybotes","Anolis_angusticeps","Anolis_angusticeps"))
fossilNodes<-c()
nodeN<-c()
for(i in fossilData$svl){
Node<-fastMRCA(AnolisTree, fossilData[i,"tip1"], fossilData[i,"tip2"])
fossilNodes[i]<-fossilData[i,"svl"]
nodeN[i]<-Node
}
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
plot(x= Ancestors$ace,Ancestors_withFossils$ace, col= "blue", xlab= "Ancestral State w/ Fossils", ylab= "Ancestral state")
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
for(i in fossilData$svl){
Node<-fastMRCA(AnolisTree, fossilData[i,"tip1"], fossilData[i,"tip2"])
fossilNodes[i]<-fossilData[i,"svl"]
nodeN[i]<-Node
}
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
print(fossilData)
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
Ancestors <- fastAnc(AnolisTree, svl, vars= TRUE, CI= TRUE)
svl <- setNames(data$svl, rownames(data))
par(mar=c(0.1,0.1,0.1,0.1))
plot(AnolisTree, type="fan", lwd=2, show.tip.label=F)
plot(AnolisTree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[AnolisTree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(AnolisTree,svl,plot=F)
plot(obj, type="fan", legend= 0.7*max(nodeHeights(AnolisTree)), sig= 2, fsize= c(0.7,0.9))
fossilData <- data.frame(svl = log(c(25.4,23.2,17.7,19.7,24,31)), tip1 = c("Anolis_aliniger","Anolis_aliniger","Anolis_occultus","Anolis_ricordii","Anolis_cristatellus","Anolis_occultus"), tip2 = c("Anolis_chlorocyanus","Anolis_coelestinus","Anolis_hendersoni","Anolis_cybotes","Anolis_angusticeps","Anolis_angusticeps"))
fossilNodes<-c()
nodeN<-c()
for(i in fossilData$svl){
Node<-fastMRCA(AnolisTree, fossilData[i,"tip1"], fossilData[i,"tip2"])
fossilNodes[i]<-fossilData[i,"svl"]
nodeN[i]<-Node
}
names(fossilNodes) <- nodeN
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states = fossilNodes, CI=TRUE, var=TRUE)
setwd("C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data")
DataRate <- read.csv('C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data\\Rate.csv', header = TRUE, stringsAsFactors = FALSE)
DataDuration <- read.csv('C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data\\Duration.csv', header = TRUE, stringsAsFactors = FALSE)
DataProbability <- read.csv('C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data\\Probability.csv', header = TRUE, stringsAsFactors = FALSE)
head(DataRate)
SquamateTree <- read.tree("Pyron.tre")
SquamateTree
plot(SquamateTree)
)
Relatedness <- vcv(SquamateTree)
Relatedness[1:6,1:6]
Rattlesnake <- grep("Crotalus", rownames(Relatedness))
Rattlesnake[,1:5]
dim(Rattlesnake)
Rattlesnake
length(Rattlesnake)
PrunedRelated <- Relatedness[Rattlesnake[1],]
dim(PrunedRelated)
head(PrunedRelated)
DataRate$Species
ChosenRelated <- PrunedRelated[DataRate$Species]
ChosenRelated
colnames(Relatedness)[Rattlesnake]
Rattlesnake <- grep("Crotalus_atrox", rownames(Relatedness))
PrunedRelated <- Relatedness[Rattlesnake,]
ChosenRelated <- PrunedRelated[DataRate$Species]
ChosenRelated
?vcv
Rattlesnake <- grep("Crotalus_horridus", rownames(Relatedness))
PrunedRelated <- Relatedness[Rattlesnake,]
ChosenRelated <- PrunedRelated[DataRate$Species]
ChosenRelated
setdiff(DataRate$Species, colnames(PrunedRelated))
colnames(PrunedRelated)
dim(PrunedRelated)
PrunedRelated
setdiff(DataRate$Species, names(PrunedRelated))
grep("melanurus", names(PrunedRelated))
names(PrunedRelated)[grep("melanurus", names(PrunedRelated))]
names(PrunedRelated)[grep("mattogrossensis", names(PrunedRelated))]
DataProbability
DataDuration
plot(DataProbability[,1], DataProbability[,2])
DataRate <- read.csv('C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data\\Rate.csv', header = TRUE, stringsAsFactors = FALSE)
DataDuration <- read.csv('C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data\\Duration.csv', header = TRUE, stringsAsFactors = FALSE)
DataProbability <- read.csv('C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Project\\Data\\Probability.csv', header = TRUE, stringsAsFactors = FALSE)
par(mfrow=c(1,3), mar=c(4,4,1,1), pch=16)
plot(DataDuration[,1], DataDuration[,2], xlab="relatedness to rattlesnake", ylab="duration")
plot(DataRate[,1], DataRate[,2], xlab="relatedness to rattlesnake", ylab="rate")
DataDuration
plot(DataDuration[,2], DataDuration[,3], xlab="relatedness to rattlesnake", ylab="duration")
plot(DataRate[,2], DataRate[,3], xlab="relatedness to rattlesnake", ylab="rate")
plot(DataProbability[,2], DataProbability[,3], xlab="relatedness to rattlesnake", ylab="probability")
plot(DataRate[,2], DataRate[,3], xlab="relatedness to rattlesnake", ylab="rate")
setwd("C:\\Users\\abh00\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_09")
library(phytools)
AnolisTree <- force.ultrametric(read.tree("https://jonsmitchell.com/data/anolis.tre"))
par(las=1)
hist(AnolisTree$edge.length, col= 'black', border= 'white', main= "", xlab= "edge lengths for the anolis tree", ylim= c(0, 50), xlim= c(0, 6))
tipEdges <- which(AnolisTree$edge[,2] <= Ntip(AnolisTree))
Lengths <- AnolisTree$edge.length
names(Lengths) <- AnolisTree$tip.label
names(Lengths)[which(Lengths == min(Lengths))]
plot(AnolisTree, type="fan")
print(AnolisTree)
data <- read.csv("https://jonsmitchell.com/data/svl.csv", stringsAsFactors=F, row.names=1)
dim(data)
typeof(data)
nrow(data)
svl <- setNames(data$svl, rownames(data))
Ancestors <- fastAnc(AnolisTree, svl, vars= TRUE, CI= TRUE)
?fastAnc
par(mar=c(0.1,0.1,0.1,0.1))
plot(AnolisTree, type="fan", lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[AnolisTree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(AnolisTree,svl,plot=F)
plot(obj, type="fan", legend= 0.7*max(nodeHeights(AnolisTree)), sig= 2, fsize= c(0.7,0.9))
fossilData <- data.frame(svl = log(c(25.4,23.2,17.7,19.7,24,31)), tip1 = c("Anolis_aliniger","Anolis_aliniger","Anolis_occultus","Anolis_ricordii","Anolis_cristatellus","Anolis_occultus"), tip2 = c("Anolis_chlorocyanus","Anolis_coelestinus","Anolis_hendersoni","Anolis_cybotes","Anolis_angusticeps","Anolis_angusticeps"))
fossilNodes<-c()
nodeN<-c()
for(i in 1:6){
Node<-fastMRCA(AnolisTree, fossilData[i,"tip1"], fossilData[i,"tip2"])
fossilNodes[i]<-fossilData[i,"svl"]
nodeN[i]<-Node
}
names(fossilNodes) <- nodeN
Ancestors_withFossils<- fastAnc(AnolisTree, svl, anc.states = fossilNodes, CI=TRUE, var=TRUE)
plot(Ancestors$ace,Ancestors_withFossils$ace, col= "blue", xlab= "Ancestral State w/ Fossils", ylab= "Ancestral state")
install.packages
install.packages("geiger")
library(geiger)
lambdaFit <- fitContinious(tree,data,model="lambda")
lambdaFit <- fitContinious(tree,data,model="lambda")
lambdaFit <- fitContinuous(tree,data,model="lambda")
lambdaFit <- fitContinuous(AnolisTree,data,model="lambda")
brownianFit <- fitContinuous(AnolisTree,data,model="brownian")
ouFit <- fitContinuous(AnolisTree,data,model="ou")
ebFit <- fitContinuous(AnolisTree,data,model="eb")
ratetrendFit <- fitContinuous(AnolisTree,data,model="ratetrend")
kappaFit <- fitContinuous(AnolisTree,data,model="kappa")
deltaFit <- fitContinuous(AnolisTree,data,model="delta")
meantrendFit <- fitContinuous(AnolisTree,data,model="meantrend")
whiteFit <- fitContinuous(AnolisTree,data,model="white")
brownianFit <- fitContinuous(AnolisTree,data,model="BM")
ouFit <- fitContinuous(AnolisTree,data,model="OU")
ebFit <- fitContinuous(AnolisTree,data,model="EB")
ratetrendFit <- fitContinuous(AnolisTree,data,model="rate_trend")
kappaFit <- fitContinuous(AnolisTree,data,model="kappa")
deltaFit <- fitContinuous(AnolisTree,data,model="delta")
meantrendFit <- fitContinuous(AnolisTree,data,model="mean_trend")
whiteFit <- fitContinuous(AnolisTree,data,model="white")
